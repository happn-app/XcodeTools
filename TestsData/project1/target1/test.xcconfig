//
// happn-Debug.xcconfig
//
// Originally generated by BuildSettingExtractor on 8/29/15
// https://github.com/dempseyatgithub/BuildSettingExtractor
//

#include "Utils.xcconfigimport"
#include? "happn-Debug-Custom.xcconfigimport"

TEST_HAS_IMPORTED_1 = NO
TEST_HAS_IMPORTED_2 = NO

// Does not do anything AFAICT
#include "./auto-xcconfigimports/"
// Does not work haha
//#include "./auto-xcconfigimports/*"

TEST_IMPORTED_SRCROOT = NO
TEST_IMPORTED_DEV_DIR = NO
// The three includes below show that “<DEVELOPER_DIR>” is replaced by the
// current developer dir, only when prefix of the import path.
// Other variables do not seems to work (we tested SRCROOT on third import here,
// which works, but only because we have created the “<SRCROOT>” folder.
#include "<DEVELOPER_DIR>/Library/Xcode/Templates/File Templates/Other/Configuration Settings File.xctemplate/___FILEBASENAME___.xcconfig"
#include "./<DEVELOPER_DIR>/test_dev_dir.xcconfigimport"
#include "<SRCROOT>/target1/test_srcroot.xcconfigimport"

// Uncommenting the line below might trigger a very long build planning. You
// have been warned!
//#include "<DEVELOPER_DIR>"

TEST_COMMENT_IMPORT = NO

#include "test.xcconfig"
  #	 include 	"test2.xcconfig" // This works?
#include "test3.xcconfig"

TEST_INCLUDE_QUOTES = NO
// Does not work. Parses include "test\\", then fails with unexpected char.
// “#include "test\"” would work if the “test\” file existed.
//#include "test\"4.xcconfig"

// See the Readme for informations about the different possible values for the
// preprocessing macros (build configuration options for Swift).

A = hello
B =
C= ;
D=

TEST_VARIANT=toto
TEST_VARIANT[sdk=*][sdk=macosx*][sdk=iphoneos*] = hello2
TEST_VARIANT[sdk=iphoneos*] = hello3
TEST_VARIANT[sdk=macosx*] = hello4
TEST_VARIANT[sdk=macosx*,arch=*] = hello5

TEST_RESOLUTION_OF_VARIANT = prefix $(TEST_VARIANT[sdk=macosx*]) suffix

TEST_VARIANT_2[sdk=macosx*][arch=*] = hello2
TEST_VARIANT_3[sdk=macosx*,arch=*] = hello2

TEST_QUOTES= ";"
TEST_QUOTES_2= ";";s
TEST_QUOTES_3= ";";s;

TEST_SPACES="a b"  'a b c'	 	 ; //hello
TEST_INCLUDES=$(inherited) test
TEST_INCLUDES_2=$(TEST_INCLUDES_2) test

GCC_PREPROCESSOR_DEFINITIONS        = $(CUSTOM_GCC_PREPROCESSOR_DEFINITIONS)         RELEASE_TYPE_DEV  ENABLE_HC_LOGGER  ENABLE_DB_HC_LOGGER  ENABLE_COLORED_HC_LOGGER  ENABLE_THREAD_SAFE_HC_LOGGER  ENABLE_PER_USER_HC_LOGGER_CONFIG  NO_BUG_SENSE  $(inherited)
SWIFT_ACTIVE_COMPILATION_CONDITIONS = $(CUSTOM_SWIFT_ACTIVE_COMPILATION_CONDITIONS)  RELEASE_TYPE_DEV  ENABLE_HC_LOGGER  ENABLE_DB_HC_LOGGER  ENABLE_COLORED_HC_LOGGER  ENABLE_THREAD_SAFE_HC_LOGGER  ENABLE_PER_USER_HC_LOGGER_CONFIG  NO_BUG_SENSE  $(inherited)

TEST_RECURSION_2 = $(TEST_RECURSION_1)
TEST_RECURSION_1 = $(TEST_RECURSION_2)

VALUE_1 = one
VALUE_2 = two
VALUE_3 = three
NUMBER = 1
TEST_EMBEDDED = $(VALUE_$(NUMBER))
TEST_INVALID_EMBEDDED_1 = $(VALUE_$(NUMBER)
TEST_INVALID_EMBEDDED_2 = $(VALUE_$(NUMBER

TEST_VARIABLE_1 = $$(VALUE_$(NUMBER
TEST_VARIABLE_2 = /$()/

// LEVEL_UP is defined in the project settings
TEST_RESOLUTION_LEVEL_UP = prefix $(LEVEL_UP) suffix

TEST_RESOLUTION_ASYMETRIC = prefix $(TEST_VARIABLE_2} suffix
TEST_RESOLUTION_ASYMETRIC2 = prefix ${TEST_VARIABLE_2) suffix
// Asymetric in plist
TEST_RESOLUTION_ASYMETRIC3 = hello

TEST_RESOLUTION_NO_PARENTHESIS = prefix $A suffix
TEST_RESOLUTION_NO_PARENTHESIS2 = prefix $VALUE_1 suffix
TEST_RESOLUTION_NO_PARENTHESIS3 = prefix $VALUE_1	suffix
TEST_RESOLUTION_NO_PARENTHESIS4 = prefix $VALUE_1suffix
TEST_RESOLUTION_NO_PARENTHESIS5 = prefix $DOES_NOT_EXIST suffix
TEST_RESOLUTION_NO_PARENTHESIS6 = prefix $$VALUE_1 suffix
TEST_RESOLUTION_NO_PARENTHESIS7 = prefix $VALUE_$NUMBER suffix

TEST_RESOLUTION_DOES_NOT_EXIST = prefix $(DOES_NOT_EXIST) suffix

TEST_SINGLE_DOLLAR = prefix $ suffix

TEST_INHERIT_NO_PARENTHESIS = yo
TEST_INHERIT_NO_PARENTHESIS = $inherited yo
